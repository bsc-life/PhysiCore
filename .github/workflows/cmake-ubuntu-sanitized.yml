name: ASAN, LSAN, UBSAN, TSAN Build on Ubuntu

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    env:
      # Ensure a stable, known path for the vcpkg binary cache so the cache step has a valid directory
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/.vcpkg-cache
      # Allow read/write to the default binary sources; run-vcpkg will honor this
      VCPKG_BINARY_SOURCES: default,readwrite

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        include:
          # ASAN, LSAN, UBSAN
          - os: ubuntu-latest
            workflow: llvm-debug
          # TSAN
          - os: ubuntu-latest
            workflow: llvm-relwithdebinfo

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Set up binary cache
      uses: actions/cache@v4
      with:
        path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
        # Invalidate cache when vcpkg manifests or overlay ports change
        key: ${{ runner.os }}-vcpkg-binary-cache-${{ hashFiles('vcpkg*.json', 'ports-overlays/**') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-binary-cache-

    - name: Install dependencies
      run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 20 all

    - name: Set up vcpkg
      uses: lukka/run-vcpkg@v11

    - name: Run CMake Workflow
      run: cmake --workflow --preset ${{ matrix.workflow }}
      env:
        CXX: /usr/bin/clang++-20
        CC: /usr/bin/clang-20
