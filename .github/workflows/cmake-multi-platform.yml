# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake Build on Ubuntu, Windows, and MacOS

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    env:
      # This is just a placeholder, vcpkg step will set it up
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/.vcpkg-cache

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        include:
          - os: ubuntu-latest
            preset: gcc-release
          - os: ubuntu-latest
            preset: llvm-release
          - os: macos-latest
            preset: appleclang-release
          - os: windows-latest
            preset: msvc-release

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libomp-dev

    - name: Set up vcpkg
      uses: lukka/run-vcpkg@v11
      env:
        VCPKG_BINARY_SOURCES: default,readwrite

    - name: Restore vcpkg binary cache
      id: restore-vcpkg-cache
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
        key: ${{ runner.os }}-vcpkg-binary-cache2

    - name: Run CMake consuming CMakePreset.json and run vcpkg to build packages
      uses: lukka/run-cmake@v10
      with:
        workflowPreset: ${{ matrix.preset }}

    - name: Save vcpkg binary cache
      uses: actions/cache/save@v4
      with:
        path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
        key: ${{ steps.restore-vcpkg-cache.outputs.cache-primary-key }}
